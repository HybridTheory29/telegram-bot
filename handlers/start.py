import sqlite3
from aiogram import Router, F
from aiogram.types import Message
from keyboards.all_keyboards import main_kb, item_kb
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

start_router = Router()
order_data = {}
yuan_rate = 14

def get_db_connection():
    connection = sqlite3.connect('database.db')
    connection.row_factory = sqlite3.Row
    return connection

class ClientStatesGroup(StatesGroup):
    item = State() 
    cost = State()

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    connection = get_db_connection()
    cursor = connection.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    connection.close()

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞.', reply_markup=main_kb(message.from_user.id))

@start_router.message(Command("me"))
async def cmd_me(message: Message):
    user_id = message.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user:
        await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                            f"ID: {user['user_id']}\n"
                            f"Username: {user['username']}\n")
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    conn.close()

@start_router.message(F.text == '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏üí∞')
async def cmd(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=item_kb(message.from_user.id))
    await state.set_state(ClientStatesGroup.item)
    #user_state[message.from_user.id] = {"step": "awaiting_item"}

@start_router.message(F.text == '–ù–∞–∑–∞–¥‚è™')
async def cmd(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=main_kb(message.from_user.id))

@start_router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùóÔ∏è')
async def cmd(message: Message):
    await message.answer(f"‚ùóÔ∏è–ë–æ—Ç –∫–∞–Ω–∞–ª–∞ Lotus Logistics‚ùóÔ∏è\n\nüíπ–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è 1¬•={yuan_rate}‚ÇΩüíπ\n\nüëâ–≤–ª–∞–¥–µ–ª–µ—Ü - @ya_dimassüëà")

@start_router.message(F.content_type == "item", StateFilter(ClientStatesGroup.item))
async def choose_item(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['item'] = message.text

    await message.reply('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö:')
    await ClientStatesGroup.next()

@start_router.message(StateFilter(ClientStatesGroup.cost))
async def input_cost(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['cost'] = message.text
        print(data)

    await message.reply('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    await state.finish

"""
@start_router.message()
async def handle_price_input(message: Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)
    item_name = message.text.strip()
    
    if state and state["step"] == "awaiting_item":
        if item_name in ["–ö—Ä–æ—Å—Å–æ–≤–∫–∏üëü", "–ö–æ—Ñ—Ç—ã", "–§—É—Ç–±–æ–ª–∫–∏üëï", "–ö–æ—Å–º–µ—Ç–∏–∫–∞üíÖüèª/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã‚åöÔ∏è"]:
            user_state[user_id]["item"] = item_name
            user_state[user_id]["step"] = "awaiting_price"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö:")
        return
    
    if state and state["step"] == "awaiting_price":
        try:
            cny_price = float(message.text)
            item_name = user_state[user_id]["item"]

            if item_name == "–ö—Ä–æ—Å—Å–æ–≤–∫–∏üëü":
                rub_price = cny_price * yuan_rate + 1700
            elif item_name == "–ö–æ—Ñ—Ç—ã":
                rub_price = cny_price * yuan_rate + 1100
            elif item_name == "–§—É—Ç–±–æ–ª–∫–∏üëï":
                rub_price = cny_price * yuan_rate + 850
            elif item_name == "–ö–æ—Å–º–µ—Ç–∏–∫–∞üíÖüèª/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã‚åöÔ∏è":
                rub_price = cny_price * yuan_rate + 700
            
            await edit_cart(state, user_id=message.from_user.id)
            await message.answer(f"–¶–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{item_name}' ‚âà {rub_price} ‚ÇΩ.\n–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")

        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        finally:
            user_state.pop(user_id, None)

@start_router.message(Command("cart"))
async def show_cart(message: Message):
    user_id = message.from_user.id

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_connection = sqlite3.connect("cart.db")
    db_cursor = db_connection.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_cursor.execute("SELECT item_name, item_price FROM cart WHERE user_id = ?", (user_id,))
        items = db_cursor.fetchall()
    except sqlite3.Error as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    finally:
        db_connection.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        total_price = sum(item[1] for item in items)
        cart_details = "\n".join([f"{item[0]}: {item[1]} ‚ÇΩ" for item in items])
        await message.answer(f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_details}\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ")

@start_router.message(Command("clear"))
async def clear_cart(message: Message):
    user_id = message.from_user.id
    db_cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    db_connection.commit()
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
"""
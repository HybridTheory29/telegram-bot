import sqlite3
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.all_keyboards import main_kb, item_kb, action_kb
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

start_router = Router()
order_data = {}
yuan_rate = 14

def get_db_connection():
    connection = sqlite3.connect('database.db')
    connection.row_factory = sqlite3.Row
    return connection

class ClientStatesGroup(StatesGroup):
    waiting_item = State() 
    waiting_price = State()

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_kb(message.from_user.id))
    await message.answer('<strong>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–° –≤–∞–º–∏ –∫–æ–º–∞–Ω–¥–∞ China 29üá®üá≥</strong>\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.', reply_markup=action_kb())

@start_router.callback_query(lambda c: c.data.startswith("item_"))
async def process_product_selection(callback: CallbackQuery, state: FSMContext):
    item = callback.data.split("_")[1]

    await state.update_data(item=item)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {item}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö:")
    await state.set_state(ClientStatesGroup.waiting_price)
    await callback.answer()

@start_router.callback_query()
async def process_callback(callback: CallbackQuery, state: FSMContext):
    callback_data = callback.data

    if callback_data == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏":
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=item_kb())
        await state.set_state(ClientStatesGroup.waiting_item)
    elif callback_data == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await callback.message.answer(f"<strong>‚ùóÔ∏è–ë–æ—Ç –∫–∞–Ω–∞–ª–∞ Lotus Logistics‚ùóÔ∏è</strong>\n\nüíπ–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è 1¬•={yuan_rate}‚ÇΩüíπ\n\nüëâ<u>–≤–ª–∞–¥–µ–ª–µ—Ü - @ya_dimassüëà</u>")

    await callback.answer()


@start_router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def cmd(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_kb(message.from_user.id))
    await message.answer('<strong>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–° –≤–∞–º–∏ –∫–æ–º–∞–Ω–¥–∞ China 29üá®üá≥</strong>\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.', reply_markup=action_kb())
    await state.clear()

@start_router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞')
async def cmd_cart(message: Message):
    user_id = message.from_user.id

    connection = get_db_connection()
    cursor = connection.cursor()

    cursor.execute('''
    SELECT products.item, products.price
    FROM cart
    JOIN products ON cart.item_id = products.id
    WHERE cart.user_id = ?
    ''', (user_id,))
    items = cursor.fetchall()

    if items:
        response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total_cost = 0
        for item in items:
            cost_in_rub = item['price'] * yuan_rate
            response += f"- {item['item']}: {item['price']} —é–∞–Ω–µ–π (~{cost_in_rub:.2f} —Ä—É–±–ª–µ–π)\n"
            total_cost += item['price']
        response += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —é–∞–Ω–µ–π (~{total_cost * yuan_rate:.2f} —Ä—É–±–ª–µ–π)."
    else:
        response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    connection.close()
    await message.answer(response, reply_markup=main_kb(user_id))

@start_router.message(ClientStatesGroup.waiting_price)
async def get_item_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")
        return
    
    data = await state.get_data()
    item = data.get("item")

    if item == "–ö—Ä–æ—Å—Å–æ–≤–∫–∏üëü":
        cost_in_rub = price * yuan_rate + 1700
    elif item == "–ö–æ—Ñ—Ç—ã":
        cost_in_rub = price * yuan_rate + 1100
    elif item == "–§—É—Ç–±–æ–ª–∫–∏üëï":
        cost_in_rub = price * yuan_rate + 850
    elif item == "–ö–æ—Å–º–µ—Ç–∏–∫–∞üíÖüèª/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã‚åöÔ∏è":
        cost_in_rub = price * yuan_rate + 700

    connection = get_db_connection()
    cursor = connection.cursor()

    cursor.execute('INSERT INTO products (item, price) VALUES (?, ?)', (item, price))
    item_id = cursor.lastrowid
    connection.commit()

    user_id = message.from_user.id
    cursor.execute('INSERT INTO cart (user_id, item_id) VALUES (?, ?)', (user_id, item_id))
    connection.commit()

    connection.close()

    await message.answer(f"–¢–æ–≤–∞—Ä '{item}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
                         f"–¶–µ–Ω–∞: {price} —é–∞–Ω–µ–π (~{cost_in_rub:.2f} —Ä—É–±–ª–µ–π).")

    await state.clear()

@start_router.message(F.text == '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
async def clear_cart(message: Message):
    user_id = message.from_user.id
    connection = get_db_connection()
    cursor = connection.cursor()

    cursor.execute('DELETE FROM cart WHERE user_id = ?', (user_id,))

    connection.commit()
    connection.close()

    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞.", reply_markup=main_kb(user_id))